#! /bin/sh
patch -p1 -l -f $* < $0
exit $?

diff --git a/src/main.cpp b/src/main.cpp
index 1d654b8..58dab0b 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -1,19 +1,22 @@
 /*  This file is part of the KDE libraries
     SPDX-FileCopyrightText: 2015 Lukáš Tinkl <ltinkl@redhat.com>
+    SPDX-FileCopyrightText: 2021 Ingo Klöcker <kloecker@kde.org>
 
     SPDX-License-Identifier: LGPL-2.0-or-later
 */
 
+#include "ki18n_logging.h"
+
 #include <QCoreApplication>
 #include <QLocale>
 #include <QLibraryInfo>
 #include <QTranslator>
 
-// load global Qt translation, needed in KDE e.g. by lots of builtin dialogs (QColorDialog, QFontDialog) that we use
-static bool loadTranslation(const QString &localeName)
+static bool loadCatalog(const QString &catalog, const QLocale &locale)
 {
     QTranslator *translator = new QTranslator(QCoreApplication::instance());
-    if (!translator->load(QLocale(localeName), QStringLiteral("qt_"), QString(), QLibraryInfo::location(QLibraryInfo::TranslationsPath))) {
+    if (!translator->load(locale, catalog, QString(), QLibraryInfo::location(QLibraryInfo::TranslationsPath))) {
+        qCDebug(KI18N) << "Loading the" << catalog << "catalog failed for locale" << locale;
         delete translator;
         return false;
     }
@@ -21,19 +24,52 @@ static bool loadTranslation(const QString &localeName)
     return true;
 }
 
+static bool loadCatalog(const QString &catalog, const QLocale &locale, const QLocale &fallbackLocale)
+{
+    // try to load the catalog for locale
+    if (loadCatalog(catalog, locale)) {
+        return true;
+    }
+    // if this fails, then try the fallback locale (if it's different from locale)
+    if (fallbackLocale != locale) {
+        return loadCatalog(catalog, fallbackLocale);
+    }
+    return false;
+}
+
+// load global Qt translation, needed in KDE e.g. by lots of builtin dialogs (QColorDialog, QFontDialog) that we use
+static void loadTranslation(const QString &localeName, const QString &fallbackLocaleName)
+{
+    const QLocale locale{localeName};
+    const QLocale fallbackLocale{fallbackLocaleName};
+    // first, try to load the qt_ meta catalog
+    if (loadCatalog(QStringLiteral("qt_"), locale, fallbackLocale)) {
+        return;
+    }
+    // if loading the meta catalog failed, then try loading the four catalogs
+    // it depends on, i.e. qtbase, qtscript, qtmultimedia, qtxmlpatterns, separately
+    const auto catalogs = {
+        QStringLiteral("qtbase_"),
+        QStringLiteral("qtscript_"),
+        QStringLiteral("qtmultimedia_"),
+        QStringLiteral("qtxmlpatterns_"),
+    };
+    for (const auto &catalog : catalogs) {
+        loadCatalog(catalog, locale, fallbackLocale);
+    }
+}
+
 static void load()
 {
     // The way Qt translation system handles plural forms makes it necessary to
     // have a translation file which contains only plural forms for `en`. That's
     // why we load the `en` translation unconditionally, then load the
     // translation for the current locale to overload it.
-    loadTranslation(QStringLiteral("en"));
+    loadCatalog(QStringLiteral("qt_"), QLocale{QStringLiteral("en")});
 
-    QLocale locale = QLocale::system();
+    const QLocale locale = QLocale::system();
     if (locale.name() != QStringLiteral("en")) {
-        if (!loadTranslation(locale.name())) {
-            loadTranslation(locale.bcp47Name());
-        }
+        loadTranslation(locale.name(), locale.bcp47Name());
     }
 }
 
